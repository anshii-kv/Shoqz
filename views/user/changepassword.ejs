<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Change Password</title>
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f7fa;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    .form-box {
      background-color: #fff;
      padding: 30px 25px;
      width: 350px;
      border-radius: 10px;
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
    }

    .form-box h2 {
      text-align: center;
      margin-bottom: 25px;
      color: #333;
      font-size: 22px;
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
      color: #333;
    }

    input[type="password"] {
      width: 100%;
      padding: 10px 12px;
      margin-bottom: 20px;
      border-radius: 5px;
      border: 1px solid #ccc;
      font-size: 14px;
    }

    button[type="submit"] {
      width: 100%;
      padding: 10px;
      background-color: #c7eafc;
      border: none;
      border-radius: 5px;
      color: #333;
      font-weight: bold;
      cursor: pointer;
      font-size: 15px;
    }

    button[type="submit"]:hover {
      background-color: #b0dff1;
    }
  </style>
</head>
<body>

  <div class="form-box">
    <h2>Change Password</h2>
    <form id="changePasswordForm" method="POST" action="/changepassword">
      <label for="newPassword">New Password</label>
      <input type="password" id="newPassword" name="newPassword" required>

      <label for="confirmPassword">Confirm Password</label>
      <input type="password" id="confirmPassword" name="confirmPassword" required>

      <button type="submit">Submit</button>
    </form>
  </div>
 


       <script>
        document.getElementById("changePasswordForm").addEventListener("submit", async function (e) {
          e.preventDefault(); 
      
          const newPassword = document.getElementById("newPassword").value;
          const confirmPassword = document.getElementById("confirmPassword").value;
      
          if (newPassword !== confirmPassword) {
            swal("Error", "Passwords do not match!", "error");
            return; 
          }
      
          try {
            const updatePassword = await fetch('/changepassword', {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ password: newPassword })
            });
      
            const data = await updatePassword.json();
      
            if (data.message === 'password changed') {
              swal("Success", data.message, "success").then(() => {
                window.location.href = "/login";
              });
            } else {
              swal("Failed", data.message, "error");
            }
          } catch (error) {
            console.log(error);
            swal("Error", "Something went wrong.", "error");
          }
        });

// Password toggle functionality
function togglePassword(fieldId) {
    const field = document.getElementById(fieldId);
    const toggleBtn = field.nextElementSibling.querySelector('i');
    
    if (field.type === 'password') {
        field.type = 'text';
        toggleBtn.classList.remove('fa-eye');
        toggleBtn.classList.add('fa-eye-slash');
    } else {
        field.type = 'password';
        toggleBtn.classList.remove('fa-eye-slash');
        toggleBtn.classList.add('fa-eye');
    }
}

// Password strength checker
function checkPasswordStrength(password) {
    let strength = 0;
    const requirements = {
        length: password.length >= 8,
        uppercase: /[A-Z]/.test(password),
        lowercase: /[a-z]/.test(password),
        number: /\d/.test(password),
        special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
    };

    Object.values(requirements).forEach(req => {
        if (req) strength++;
    });

    return { strength, requirements };
}

// Update password strength indicator
function updatePasswordStrength(password) {
    const strengthBar = document.getElementById('passwordStrengthBar');
    const strengthText = document.getElementById('passwordStrengthText');
    
    if (!password) {
        strengthBar.style.width = '0%';
        strengthBar.className = 'password-strength-bar';
        strengthText.textContent = 'Password strength: ';
        return;
    }

    const { strength } = checkPasswordStrength(password);
    const percentage = (strength / 5) * 100;
    
    strengthBar.style.width = percentage + '%';
    
    if (strength <= 2) {
        strengthBar.className = 'password-strength-bar weak';
        strengthText.textContent = 'Password strength: Weak';
    } else if (strength <= 4) {
        strengthBar.className = 'password-strength-bar medium';
        strengthText.textContent = 'Password strength: Medium';
    } else {
        strengthBar.className = 'password-strength-bar strong';
        strengthText.textContent = 'Password strength: Strong';
    }
}

// Real-time password strength checking
document.getElementById('newPassword').addEventListener('input', function() {
    updatePasswordStrength(this.value);
});

// Form validation and submission
document.getElementById("passwordChangeForm").addEventListener("submit", async function (e) {
    e.preventDefault();
    
    // Clear previous error messages
    document.getElementById('currentPasswordMessage').textContent = '';
    document.getElementById('newPasswordMessage').textContent = '';
    document.getElementById('confirmPasswordMessage').textContent = '';
    
    const currentPassword = document.getElementById("currentPassword").value;
    const newPassword = document.getElementById("newPassword").value;
    const confirmPassword = document.getElementById("confirmPassword").value;
    
    let isValid = true;
    
    // Validate current password
    if (!currentPassword.trim()) {
        document.getElementById('currentPasswordMessage').textContent = 'Current password is required';
        isValid = false;
    }
    
    // Validate new password
    if (!newPassword.trim()) {
        document.getElementById('newPasswordMessage').textContent = 'New password is required';
        isValid = false;
    } else {
        const { requirements } = checkPasswordStrength(newPassword);
        
        if (!requirements.length) {
            document.getElementById('newPasswordMessage').textContent = 'Password must be at least 8 characters long';
            isValid = false;
        } else if (!requirements.uppercase) {
            document.getElementById('newPasswordMessage').textContent = 'Password must contain at least one uppercase letter';
            isValid = false;
        } else if (!requirements.lowercase) {
            document.getElementById('newPasswordMessage').textContent = 'Password must contain at least one lowercase letter';
            isValid = false;
        } else if (!requirements.number) {
            document.getElementById('newPasswordMessage').textContent = 'Password must contain at least one number';
            isValid = false;
        } else if (!requirements.special) {
            document.getElementById('newPasswordMessage').textContent = 'Password must contain at least one special character';
            isValid = false;
        }
    }
    
    // Validate confirm password
    if (!confirmPassword.trim()) {
        document.getElementById('confirmPasswordMessage').textContent = 'Please confirm your new password';
        isValid = false;
    } else if (newPassword !== confirmPassword) {
        document.getElementById('confirmPasswordMessage').textContent = 'Passwords do not match';
        isValid = false;
    }
    
    // If validation fails, show error and return
    if (!isValid) {
        swal("Error", "Please fix the validation errors above", "error");
        return;
    }
    
    // Show loading state
    const submitBtn = document.getElementById('changePasswordBtn');
    const btnText = submitBtn.querySelector('.btn-text');
    const loadingSpinner = submitBtn.querySelector('.loading-spinner');
    
    submitBtn.disabled = true;
    btnText.style.display = 'none';
    loadingSpinner.style.display = 'inline-block';
    
    try {
        const response = await fetch('/changepassword', {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ 
                currentPassword: currentPassword,
                newPassword: newPassword 
            })
        });
        
        const data = await response.json();
        
        if (data.message === 'password changed') {
            swal("Success", "Password changed successfully!", "success").then(() => {
                window.location.href = "/login";
            });
        } else {
            swal("Failed", data.message || "Failed to change password", "error");
        }
    } catch (error) {
        console.error('Error:', error);
        swal("Error", "Something went wrong. Please try again.", "error");
    } finally {
        // Reset loading state
        submitBtn.disabled = false;
        btnText.style.display = 'inline-block';
        loadingSpinner.style.display = 'none';
    }
});





      </script>
      
  
      <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
      
</body>
</html>